#include <iostream>
using namespace std;

struct Node {
    int data;
    Node *next;
    Node *prev;
};

class DoublyLinkedList {

private:
    Node *head;

public:
    DoublyLinkedList() : head(nullptr) {}

    void insert(int value) {
        Node *newNode = new Node();
        newNode->data = value;
        newNode->next = nullptr;
        newNode->prev = nullptr;

        if (head == nullptr) {
            head = newNode;
            return;
        }

        Node *temp = head;
        while (temp->next != nullptr) {
            temp = temp->next;
        }

        temp->next = newNode;
        newNode->prev = temp;
    }

    void display() {
        Node *temp = head;

        while (temp != nullptr) {
            cout << temp->data << endl;
            temp = temp->next;
        }
    }

    void displayReverse() {
        if (head == nullptr) return;

        Node *temp = head;
        // Move to the last node
        while (temp->next != nullptr) {
            temp = temp->next;
        }

        // Traverse backward
        while (temp != nullptr) {
            cout << temp->data << endl;
            temp = temp->prev;
        }
    }
};

int main() {
    DoublyLinkedList list;

    list.insert(10);
    list.insert(20);
    list.insert(30);
    list.insert(40);
    list.insert(50);

    cout << "Forward display:" << endl;
    list.display();

    cout << "\nReverse display:" << endl;
    list.displayReverse();

    return 0;
}
